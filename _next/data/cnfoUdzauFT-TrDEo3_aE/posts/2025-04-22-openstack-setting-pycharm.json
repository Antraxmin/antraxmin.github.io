{"pageProps":{"postData":{"id":"2025-04-22-openstack-setting-pycharm","contentHtml":"<p>vscode와 pycharm 모두 사용할 수 있지만 개인적으로는 비교도 안될만큼 pycharm이 훨씬 강력하다고 느껴서 pycharm으로 진행하고자 했다.</p>\n<h4 id=\"\">사전 요구사항</h4>\n<p>시작하기 전에 다음 프로그램들이 설치되어 있어야 한다.</p>\n<ul>\n<li>Python 3.8+ (3.11 권장)</li>\n<li>Git</li>\n<li>PyCharm Community 또는 Professional Edition</li>\n<li>+인터넷 연결</li>\n</ul>\n<h2 id=\"openstack-clone\">OpenStack 필수 프로젝트 Clone</h2>\n<p>우선 개발 환경을 만들기 위해 아래 3개의 프로젝트를 clone 해야 한다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://opendev.org/openstack/python-openstackclient\n<span class=\"token function\">git</span> clone https://opendev.org/openstack/osc-lib\n<span class=\"token function\">git</span> clone https://opendev.org/openstack/openstacksdk\n</code></pre></div>\n<ul>\n<li>python-openstackclient: 메인 OpenStack 커맨드라인 인터페이스 구현</li>\n<li>osc-lib: OpenStack 클라이언트의 공통 라이브러리</li>\n<li>openstacksdk: OpenStack API와의 상호작용을 위한 SDK</li>\n</ul>\n<p>(+ 모든 프로젝트를 동일한 디렉토리 아래에 클론해야 나중에 개발 환경 설정이 더 쉬워진다.)</p>\n<h2 id=\"python\">Python 가상 환경 설정</h2>\n<p>각 프로젝트별로 독립적인 가상환경을 설정하여 의존성 충돌을 방지한다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> python-openstackclient\npython <span class=\"token parameter variable\">-m</span> venv venv\n<span class=\"token builtin class-name\">source</span> venv/bin/activate\n</code></pre></div>\n<p>동일한 작업을 <code>osc-lib</code>과 <code>openstacksdk</code> 프로젝트에도 적용한 후, 각 프로젝트를 개발 모드로 설치하여 코드 변경사항이 즉시 반영되도록 한다.</p>\n<div class=\"remark-highlight\"><pre class=\"language-bash\"><code class=\"language-bash\">python setup.py develop\n</code></pre></div>\n<p>각 프로젝트에 독립적인 가상환경을 만들었다면 각각의 가상환경을 활성화한 후 해당 프로젝트에서만 <code>python setup.py develop</code>을 실행하면 된다. 그러나 통합 테스트를 위해서는 모든 프로젝트가 서로를 참조할 수 있어야 한다.</p>\n<h3 id=\"openstack\">OpenStack 클라이언트 실행 환경 설정하기</h3>\n<p>이제 OpenStack 명령어를 실행하기 위한 구성을 설정한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/antraxmin/post/89b76f6b-fd4b-4f1d-b19e-fb6db45f7364/image.png\" alt=\"\"></p>\n<ol>\n<li><code>python-openstackclient/openstackclient</code> 디렉토리 내의 <code>shell.py</code> 파일을 찾아 우클릭한다.</li>\n<li>Run 'shell' 옵션을 선택한다.</li>\n<li>파일이 실행된 후 오른쪽 상단의 실행 구성 드롭다운 메뉴에서 <code>Edit Configurations...</code> 을 선택한다.</li>\n<li>다음과 같이 설정을 변경한다.\n<ul>\n<li>Parameters: OpenStack 명령어 인자(<code>server list</code> 또는 <code>image list</code>)</li>\n<li>Environment variables: OpenStack 서비스에 접근하기 위한 환경 변수</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"\">환경변수</h4>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">OS_PROJECT_NAME=admin\nOS_TENANT_NAME=admin\nOS_USERNAME=admin\nOS_PASSWORD=devstack 설치할 때 설정한 password\nOS_REGION_NAME=RegionOne\nOS_IDENTITY_API_VERSION=3\nOS_AUTH_TYPE=password\nOS_AUTH_URL=http://$할당받은_공인IP/identity\nOS_USER_DOMAIN_ID=default\nOS_PROJECT_DOMAIN_ID=default\nOS_VOLUME_API_VERSION=3</code></pre></div>\n<p>모든 설정이 완료되면 Run 버튼을 클릭하여 OpenStack 명령어를 실행한다. 명령어가 성공적으로 실행되면 PyCharm 하단에 실행 결과가 표시된다.</p>\n<p><img src=\"https://velog.velcdn.com/images/antraxmin/post/b0b62df6-31ae-4dc4-aecd-4d664eee50ab/image.png\" alt=\"\"></p>\n<p>실행에 실패한 경우 아래 사항을 체크해 보자.</p>\n<ul>\n<li>비밀번호가 올바르게 설정되었는지</li>\n<li>컨트롤러 노드 IP가 정확한지</li>\n<li>환경 변수가 모두 올바르게 설정되었는지</li>\n</ul>\n<p>이제 PyCharm에서 OpenStack 개발을 위한 기본적인 환경 설정이 완료되었다.</p>\n","content":"\nvscode와 pycharm 모두 사용할 수 있지만 개인적으로는 비교도 안될만큼 pycharm이 훨씬 강력하다고 느껴서 pycharm으로 진행하고자 했다.\n\n#### 사전 요구사항\n\n시작하기 전에 다음 프로그램들이 설치되어 있어야 한다. \n\n- Python 3.8+ (3.11 권장)\n- Git\n- PyCharm Community 또는 Professional Edition\n- +인터넷 연결\n\n## OpenStack 필수 프로젝트 Clone\n\n우선 개발 환경을 만들기 위해 아래 3개의 프로젝트를 clone 해야 한다.\n\n```bash\ngit clone https://opendev.org/openstack/python-openstackclient\ngit clone https://opendev.org/openstack/osc-lib\ngit clone https://opendev.org/openstack/openstacksdk\n```\n- python-openstackclient: 메인 OpenStack 커맨드라인 인터페이스 구현\n- osc-lib: OpenStack 클라이언트의 공통 라이브러리\n- openstacksdk: OpenStack API와의 상호작용을 위한 SDK\n\n(+ 모든 프로젝트를 동일한 디렉토리 아래에 클론해야 나중에 개발 환경 설정이 더 쉬워진다.)\n\n## Python 가상 환경 설정\n각 프로젝트별로 독립적인 가상환경을 설정하여 의존성 충돌을 방지한다.\n\n```bash\ncd python-openstackclient\npython -m venv venv\nsource venv/bin/activate\n```\n\n동일한 작업을 `osc-lib`과 `openstacksdk` 프로젝트에도 적용한 후, 각 프로젝트를 개발 모드로 설치하여 코드 변경사항이 즉시 반영되도록 한다. \n\n```bash\npython setup.py develop\n```\n\n각 프로젝트에 독립적인 가상환경을 만들었다면 각각의 가상환경을 활성화한 후 해당 프로젝트에서만 `python setup.py develop`을 실행하면 된다. 그러나 통합 테스트를 위해서는 모든 프로젝트가 서로를 참조할 수 있어야 한다. \n\n\n\n### OpenStack 클라이언트 실행 환경 설정하기\n이제 OpenStack 명령어를 실행하기 위한 구성을 설정한다. \n\n![](https://velog.velcdn.com/images/antraxmin/post/89b76f6b-fd4b-4f1d-b19e-fb6db45f7364/image.png)\n\n1. `python-openstackclient/openstackclient` 디렉토리 내의 `shell.py` 파일을 찾아 우클릭한다. \n2. Run 'shell' 옵션을 선택한다. \n3. 파일이 실행된 후 오른쪽 상단의 실행 구성 드롭다운 메뉴에서 `Edit Configurations...` 을 선택한다. \n4. 다음과 같이 설정을 변경한다. \n   - Parameters: OpenStack 명령어 인자(`server list` 또는 `image list`)\n   - Environment variables: OpenStack 서비스에 접근하기 위한 환경 변수\n   \n#### 환경변수 \n```\nOS_PROJECT_NAME=admin\nOS_TENANT_NAME=admin\nOS_USERNAME=admin\nOS_PASSWORD=devstack 설치할 때 설정한 password\nOS_REGION_NAME=RegionOne\nOS_IDENTITY_API_VERSION=3\nOS_AUTH_TYPE=password\nOS_AUTH_URL=http://$할당받은_공인IP/identity\nOS_USER_DOMAIN_ID=default\nOS_PROJECT_DOMAIN_ID=default\nOS_VOLUME_API_VERSION=3\n```\n\n모든 설정이 완료되면 Run 버튼을 클릭하여 OpenStack 명령어를 실행한다. 명령어가 성공적으로 실행되면 PyCharm 하단에 실행 결과가 표시된다.\n\n![](https://velog.velcdn.com/images/antraxmin/post/b0b62df6-31ae-4dc4-aecd-4d664eee50ab/image.png)\n\n실행에 실패한 경우 아래 사항을 체크해 보자. \n- 비밀번호가 올바르게 설정되었는지\n- 컨트롤러 노드 IP가 정확한지\n- 환경 변수가 모두 올바르게 설정되었는지\n\n이제 PyCharm에서 OpenStack 개발을 위한 기본적인 환경 설정이 완료되었다. ","title":"OpenStack 개발 환경 구축 - 2. pycharm 설정","subtitle":".","date":"2025-04-22","category":"OSSCA","thumbnail":"https://velog.velcdn.com/images/antraxmin/post/db7ce016-a013-490b-b70a-3a25817fa1df/image.png"}},"__N_SSG":true}